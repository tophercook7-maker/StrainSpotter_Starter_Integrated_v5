import React, { useEffect, useState } from "react";
import { imageToEmbedding, cosine } from "./ai";

/* ---------- Simple helpers (no external imports) ---------- */
const LS_KEY = "strainspotter_gallery_v1";

function fileToImage(file) {
  return new Promise((resolve, reject) => {
    const url = URL.createObjectURL(file);
    const img = new Image();
    img.onload = () => resolve({ img, url });
    img.onerror = () => reject(new Error("Failed to load image"));
    img.src = url;
  });
}

function toDownscaledCanvas(img, maxSide = 1024) {
  const w0 = img.naturalWidth || img.width || 1;
  const h0 = img.naturalHeight || img.height || 1;
  const scale = Math.min(1, maxSide / Math.max(w0, h0));
  const w = Math.max(1, Math.round(w0 * scale));
  const h = Math.max(1, Math.round(h0 * scale));
  const canvas = document.createElement("canvas");
  canvas.width = w; canvas.height = h;
  const ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0, w, h);
  return canvas;
}

function canvasToPreviewURL(canvas, quality = 0.9) {
  try {
    return canvas.toDataURL("image/jpeg", quality);
  } catch {
    return canvas.toDataURL();
  }
}

/* ---------- Small UI bits ---------- */
function TabButton({ active, onClick, children }) {
  return (
    <button
      onClick={onClick}
      style={{
        padding: "10px 14px",
        borderRadius: 12,
        border: "1px solid " + (active ? "#059669" : "#E2E8F0"),
        background: active ? "#10B981" : "#fff",
        color: active ? "#fff" : "#0f172a",
        fontWeight: 600,
        cursor: "pointer"
      }}
    >
      {children}
    </button>
  );
}

function Card({ title, subtitle, children }) {
  return (
    <div style={{ border: "1px solid #E2E8F0", borderRadius: 16, padding: 16, background: "#fff", boxShadow: "0 1px 2px rgba(0,0,0,.04)" }}>
      {title && <div style={{ fontSize: 18, fontWeight: 800, marginBottom: 4 }}>{title}</div>}
      {subtitle && <div style={{ fontSize: 13, color: "#64748B", marginBottom: 12 }}>{subtitle}</div>}
      {children}
    </div>
  );
}

/* ---------- Main App ---------- */
export default function StrainSpotterApp() {
  const [ageOk, setAgeOk] = useState(false);
  const [tab, setTab] = useState("classify");

  // Gallery items: { id, name, img (dataURL), emb (number[]) }
  const [items, setItems] = useState(() => {
    try { return JSON.parse(localStorage.getItem(LS_KEY) || "[]"); } catch { return []; }
  });
  useEffect(() => { localStorage.setItem(LS_KEY, JSON.stringify(items)); }, [items]);

  // Classify results + busy state + preview of the query image
  const [busy, setBusy] = useState(false);
  const [results, setResults] = useState([]);   // full items with { id, name, img, emb, score }
  const [queryPreview, setQueryPreview] = useState(null);

  /* --------- Add to Gallery (asks for label NOW) --------- */
  async function onAddToGallery(e) {
    if (busy) { alert("Please wait…"); return; }
    try {
      const f = e.target.files?.[0];
      if (!f) return;

      const label = window.prompt("Enter a label for this photo:", f.name.replace(/\.[^.]+$/, "") || "Untitled");
      if (label == null) { e.target.value = ""; return; } // user cancelled

      setBusy(true);

      const { img, url } = await fileToImage(f);
      const canvas = toDownscaledCanvas(img, 1024);
      const emb = await imageToEmbedding(canvas);
      const preview = canvasToPreviewURL(canvas, 0.85);

      const id = "item_" + Date.now();
      setItems(x => [...x, { id, name: label.trim() || "Untitled", emb, img: preview }]);

      URL.revokeObjectURL(url);
      alert("Added to gallery: " + (label || f.name));
    } catch (err) {
      alert("Add failed: " + (err?.message || err));
    } finally {
      setBusy(false);
      e.target.value = "";
    }
  }

  /* --------- Classify Photo --------- */
  async function onClassify(e) {
    if (busy) { alert("Please wait…"); return; }
    try {
      const f = e.target.files?.[0];
      if (!f) return;
      if (items.length === 0) { alert("Add at least one gallery image first."); e.target.value = ""; return; }

      setBusy(true);
      setResults([]);
      setQueryPreview(null);

      const { img, url } = await fileToImage(f);
      const canvas = toDownscaledCanvas(img, 1024);
      setQueryPreview(canvasToPreviewURL(canvas, 0.85));
      const emb = await imageToEmbedding(canvas);

      const scored = items
        .map(it => ({ ...it, score: cosine(emb, it.emb || []) }))
        .sort((a, b) => b.score - a.score)
        .slice(0, 5);

      setResults(scored);
      URL.revokeObjectURL(url);
    } catch (err) {
      alert("Classify failed: " + (err?.message || err));
    } finally {
      setBusy(false);
      e.target.value = "";
    }
  }

  /* --------- Rename + Delete --------- */
  function renameItem(id) {
    const it = items.find(i => i.id === id);
    if (!it) return;
    const name = window.prompt("New name:", it.name);
    if (name == null) return;
    setItems(xs => xs.map(x => x.id === id ? { ...x, name: name.trim() || "Untitled" } : x));
  }
  function deleteItem(id) {
    if (!confirm("Remove this photo from your gallery?")) return;
    setItems(xs => xs.filter(x => x.id !== id));
  }

  const galleryCount = items.length;

  /* --------- UI --------- */
  if (!ageOk) {
    return (
      <div style={{ minHeight: "100vh", background: "linear-gradient(#ECFDF5,#fff)", padding: 24, display: "grid", placeItems: "center" }}>
        <Card title="Welcome to StrainSpotter" subtitle="Age confirmation required">
          <div style={{ marginBottom: 12 }}>Are you 21 or older?</div>
          <div style={{ display: "flex", gap: 8 }}>
            <button onClick={() => setAgeOk(true)} style={{ padding:"10px 14px", border:"1px solid #10B981", background:"#10B981", color:"#fff", borderRadius:12, fontWeight:700 }}>Yes</button>
            <button onClick={() => alert("Sorry, you must be 21+")} style={{ padding:"10px 14px", border:"1px solid #E2E8F0", background:"#fff", borderRadius:12 }}>No</button>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div style={{ minHeight: "100vh", background: "linear-gradient(#ECFDF5,#fff)", color: "#0f172a", padding: 16 }}>
      {/* Header always visible & not too high */}
      <div style={{ maxWidth: 980, margin: "12px auto 16px auto" }}>
        <div style={{ fontSize: 22, fontWeight: 900, letterSpacing: 0.2 }}>StrainSpotter</div>
        <div style={{ fontSize: 13, color: "#64748B" }}>Match any photo against your personal gallery.</div>
      </div>

      <div style={{ maxWidth: 980, margin: "0 auto", display: "flex", gap: 12, alignItems: "center", flexWrap: "wrap" }}>
        <TabButton active={tab === "classify"} onClick={() => setTab("classify")}>Classify Photo</TabButton>
        <TabButton active={tab === "gallery"} onClick={() => setTab("gallery")}>My Gallery ({galleryCount})</TabButton>
        <TabButton active={tab === "import"} onClick={() => setTab("import")}>Import / Export</TabButton>
        {busy && <div style={{ fontSize: 12, color: "#64748B" }}>Processing…</div>}
      </div>

      <div style={{ maxWidth: 980, margin: "14px auto 40px auto", display: "grid", gap: 16 }}>
        {/* --------- CLASSIFY TAB --------- */}
        {tab === "classify" && (
          <Card title="Classify Photo" subtitle="Pick a photo to find the closest matches in your gallery.">
            <div style={{ display:"flex", gap:12, flexWrap:"wrap", alignItems:"center" }}>
              <label style={{ padding:"10px 14px", border:"1px solid #E2E8F0", background:"#fff", borderRadius:12, cursor:"pointer" }}>
                Choose Photo…
                <input type="file" accept="image/*" onChange={onClassify} style={{ display:"none" }} />
              </label>
            </div>

            {queryPreview && (
              <div style={{ marginTop: 14 }}>
                <div style={{ fontWeight: 800, marginBottom: 6 }}>Your photo</div>
                <div style={{ width: 220, border: "1px solid #E2E8F0", borderRadius: 12, overflow: "hidden", background: "#fff" }}>
                  <img src={queryPreview} alt="Query" style={{ width: "100%", height: "auto", display: "block" }} />
                </div>
              </div>
            )}

            {results.length > 0 && (
              <div style={{ marginTop: 16 }}>
                <div style={{ fontWeight: 800, marginBottom: 6 }}>Top matches</div>
                <div style={{ display:"grid", gap:12, gridTemplateColumns:"repeat(auto-fill, minmax(160px,1fr))" }}>
                  {results.map((r, i) => (
                    <div key={r.id || i} style={{ border:"1px solid #E2E8F0", borderRadius:12, padding:8, background:"#fff" }}>
                      <div style={{ width:"100%", paddingTop:"62%", position:"relative", background:"#F1F5F9", borderRadius:8, overflow:"hidden" }}>
                        <img src={r.img} alt={r.name} style={{ position:"absolute", inset:0, width:"100%", height:"100%", objectFit:"cover" }} />
                      </div>
                      <div style={{ marginTop: 6, display:"flex", justifyContent:"space-between", alignItems:"center", gap:8 }}>
                        <div style={{ fontWeight: 700, overflow:"hidden", textOverflow:"ellipsis", whiteSpace:"nowrap" }}>{r.name}</div>
                        <div style={{ fontSize:12, color:"#64748B" }}>{r.score.toFixed(3)}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </Card>
        )}

        {/* --------- GALLERY TAB --------- */}
        {tab === "gallery" && (
          <Card title="My Gallery" subtitle="Add labeled photos; your classifier uses these as references.">
            <div style={{ display:"flex", gap:12, alignItems:"center", flexWrap:"wrap", marginBottom:12 }}>
              <label style={{ padding:"10px 14px", border:"1px solid #E2E8F0", background:"#fff", borderRadius:12, cursor:"pointer" }}>
                Add Photo…
                <input type="file" accept="image/*" onChange={onAddToGallery} style={{ display:"none" }} />
              </label>
              <div style={{ fontSize:12, color:"#64748B" }}>{galleryCount} item{galleryCount===1?"":"s"}</div>
            </div>

            {items.length === 0 ? (
              <div style={{ fontSize:14, color:"#64748B" }}>No items yet. Add a photo to get started.</div>
            ) : (
              <div style={{ display:"grid", gap:12, gridTemplateColumns:"repeat(auto-fill, minmax(160px,1fr))" }}>
                {items.map(it => (
                  <div key={it.id} style={{ border:"1px solid #E2E8F0", borderRadius:12, padding:8, background:"#fff" }}>
                    <div style={{ width:"100%", paddingTop:"62%", position:"relative", background:"#F1F5F9", borderRadius:8, overflow:"hidden" }}>
                      <img src={it.img} alt={it.name} style={{ position:"absolute", inset:0, width:"100%", height:"100%", objectFit:"cover" }} />
                    </div>
                    <div style={{ marginTop:6, display:"flex", gap:8, alignItems:"center", justifyContent:"space-between" }}>
                      <div style={{ fontWeight:700, overflow:"hidden", textOverflow:"ellipsis", whiteSpace:"nowrap" }}>{it.name}</div>
                      <div style={{ display:"flex", gap:6 }}>
                        <button onClick={() => renameItem(it.id)} title="Rename" style={{ border:"1px solid #E2E8F0", background:"#fff", borderRadius:8, padding:"4px 8px" }}>Rename</button>
                        <button onClick={() => deleteItem(it.id)} title="Delete" style={{ border:"1px solid #FCA5A5", color:"#991B1B", background:"#fff", borderRadius:8, padding:"4px 8px" }}>Delete</button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card>
        )}

        {/* --------- IMPORT / EXPORT TAB --------- */}
        {tab === "import" && (
          <Card title="Import / Export" subtitle="Backup your gallery JSON or import it on another device.">
            <div style={{ display:"flex", gap:12, flexWrap:"wrap" }}>
              <button
                onClick={() => {
                  const data = JSON.stringify(items);
                  const blob = new Blob([data], { type: "application/json" });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement("a");
                  a.href = url; a.download = "strainspotter_gallery.json";
                  a.click();
                  URL.revokeObjectURL(url);
                }}
                style={{ padding:"10px 14px", border:"1px solid #E2E8F0", background:"#fff", borderRadius:12, cursor:"pointer" }}
              >
                Export JSON
              </button>

              <label style={{ padding:"10px 14px", border:"1px solid #E2E8F0", background:"#fff", borderRadius:12, cursor:"pointer" }}>
                Import JSON…
                <input
                  type="file"
                  accept="application/json"
                  style={{ display:"none" }}
                  onChange={async (e) => {
                    const f = e.target.files?.[0];
                    if (!f) return;
                    try {
                      const text = await f.text();
                      const arr = JSON.parse(text);
                      if (!Array.isArray(arr)) throw new Error("Bad file format");
                      setItems(arr);
                      alert("Imported " + arr.length + " item(s).");
                    } catch (err) {
                      alert("Import failed: " + (err?.message || err));
                    } finally {
                      e.target.value = "";
                    }
                  }}
                />
              </label>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
}
